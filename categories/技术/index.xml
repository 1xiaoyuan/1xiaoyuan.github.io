<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 朝闻道</title>
    <link>https://1xiaoyuan.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 朝闻道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Feb 2023 12:18:53 +0800</lastBuildDate><atom:link href="https://1xiaoyuan.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我们是怎样访问网页的</title>
      <link>https://1xiaoyuan.github.io/archives/%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E6%A0%B7%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E7%9A%84.html/</link>
      <pubDate>Fri, 10 Feb 2023 12:18:53 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E6%A0%B7%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E7%9A%84.html/</guid>
      <description>以静态网页为例。
Html 文件 Html 文件是可以被浏览器读取后生成静态网页的文件。该文件使用 Html 语言编写，html 语言被称为超文本语言，&amp;ldquo;超&amp;quot;体现在这种语言在纯文本的基础上添加了结构化的语法——标签——来赋予纯文本标题、段落、菜单、列表、链接等结构化属性。此外，Html 文件还支持嵌入图像、视频等。
服务器 服务器是一台联网的、用于储存文件的电脑。 服务器是一个联网的、专门用于储存文件的电脑（大小像一个盒子）。每个服务器都有独特的 Ip 地址，用于交互。
补充
静态网站服务器是指，文件保持原样传送给用户。 动态网站服务器在硬件和 http 软件之外加入新功能，常见应用服务器和数据库。发送文件会进行更新。 Ip 地址 Ip 地址是一个 32 位的二进制数（这决定了人很难记住它）。 Ip 地址就像是每个人的电话号一样，每一个人的电话号都唯一。
同样，每台联网的电脑都有一个唯一的 Ip 地址。只要知道了这个地址，我们就能知道储存在网络上的文件的位置。
Url 地址 url 是一个简单化的互联网资源定位器，俗称网址，可与 Ip 地址关联（解决了 Ip 地址不方便人记忆的问题）。
url 的组成：协议+域名+资源路径。
如 wendys.love 是域名， https://wendys.love 是协议+域名， https://wendys.love/archives/hello-world.html/ 是协议+域名+资源路径。 一般情况下，可以不输入协议直接访问。还有 https 协议要比 http 协议安全些。 同样，互联网上的每个文件都有唯一的 Url。 浏览器 浏览器是解析、渲染 html、css 等文件的工具，也是解析 url 的工具，是客户端（用户）和服务器端产生交互的桥梁。
用户通过向浏览器输入 Url（网址），浏览器解析出 Url 对应的 Ip 地址，并向该 Ip 发送交互请求，以求获得访问文件的权限。
我们访问网页的过程可以描述为：</description>
    </item>
    
    <item>
      <title>CDN加速</title>
      <link>https://1xiaoyuan.github.io/archives/cdn%E5%8A%A0%E9%80%9F.html/</link>
      <pubDate>Thu, 05 Jan 2023 20:36:23 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/cdn%E5%8A%A0%E9%80%9F.html/</guid>
      <description>小白互助😄
Oh，我的网站好慢呐 博客搭在Github的一个缺点是网页访问速度慢，为了解决这个问题，可以借助CDN。
网页为什么慢，简单地说，就是服务器（Github服务器在国外）和客户端（访问网站的用户）距离太远，资源拉取慢。
CDN，即内容分发网络。它的功能是将指定的资源提前缓存到分布在各个城市的站点（缓存服务器）。这样一来，在用户在访问网站后，数据将直接从距离最近的服务器中获取，无需再从原来那个远在天边的源服务器获取（如果它真的远在天边的话）。
ok，那么接下来的问题就是找到一个能白嫖的CDN了，嘻嘻。
jsdelivr 现在该轮到今天的主角了——jsdelivr。
配置起来及其简单，只需要在浏览器的地址栏，按照一定格式输入代码（其实就是一个url），即可上传Github的文件到jsdelivr的服务，然后使用他们的服务。
如果你的博客也搭建在Github，那么下面的内容对你会有所帮助。
首先，为你的Github的博客仓库发布一个release版本（很简单，上网搜），然后代码如下：
上传整个版本： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/ 或者上传版本中的某个文件： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/文件名+后缀 或者上传版本中的某个文件夹： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/文件夹名/ 注意结尾的 / 号。
成功后会出现已上传的文档页面。然后你就会发现自己的网页打开速度飞快。
使用以下代码可以直接上传整个仓库的文件，实时更新，而不是某个版本。
https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/
比如我是这么用的：https://cdn.jsdelivr.net/gh/1xiaoyuan/1xiaoyuan.github.io/
后来我才发现去掉版本号可以直接上传整个仓库🤷‍♂️</description>
    </item>
    
    <item>
      <title>快速搜索网页、打开常用应用</title>
      <link>https://1xiaoyuan.github.io/archives/%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80%E5%B8%B8%E7%94%A8%E5%BA%94%E7%94%A8.html/</link>
      <pubDate>Sat, 12 Nov 2022 00:29:17 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80%E5%B8%B8%E7%94%A8%E5%BA%94%E7%94%A8.html/</guid>
      <description>抛开效率应用不谈，最节省时间的办法是多用键盘，尤其是win键（对windows用户而言）。
任务栏搜索 任务栏左下角的搜索框，既能搜索并打开本地应用和服务，又能当作互联网搜索引擎使用。使用win键+输入文字也可以直接使用该功能。
使用方法：
按下win键，然后直接用键盘打字，内容可以是
一个软件名字的一部分：如微，wx，微信，然后会出现对应的本地程序以及网页搜索建议。按下回车就能打开微信。 一个服务：如控制，控制面板，kzmb，然后会出现对应的服务以及网页搜索建议。 再也不用怕有些很难找到具体位置的服务了。 一个搜索：如平凡之路，然后会出现网页搜索推荐。 这样一来，打开常用的软件、服务，就能这样加快速度了。
搜索某个问题，也不用再打开新页面，再点击搜索框后，再输入了。一个win键简化前两个步骤。
浏览器快速搜索 现在的主流浏览器是 Edge 和 Chrome ，我使用它们浏览网页，想要搜索一个概念或问题，就需要另开一个新网页再搜索，甚是麻烦。
下面提供一种在原页面进行搜索的方法。
Ctrl + E 打开地址栏快捷搜索； 输入想搜的问题； Alt + Enter 在新标签页打开搜索内容。 如果第3步直接用Enter，当前页面会被刷新。</description>
    </item>
    
    <item>
      <title>Hugo使用经验</title>
      <link>https://1xiaoyuan.github.io/archives/hugo%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html/</link>
      <pubDate>Wed, 02 Nov 2022 14:42:35 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/hugo%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html/</guid>
      <description>为了防止时间太久忘记方法，建站的关键知识点还是要记录一下的。
大人，时代变了 最初我打算自己写出整个网站（现在想想真傻），于是学了一些html和css知识。后来打开第一个txt文件准备动手写主页html文件时，我发现，我一点也写不下去，几个标签下来就厌倦不已，想完全掌握并熟练运用这些知识需要很长时间，就算掌握了它们，写出漂亮页面还需要想象力和创造力——短期内根本不可能写出完整的网页。最重要的是它们非常繁琐，一个人要投入多少时间精力才能搞定所有工作啊！
后来看到网友的一句话——独自造轮子的时代已经结束了，前人已经帮你把模型调好了——我才恍然大悟。我们这个时代太快了，闭门造车的做法很是愚蠢，学会借力前行才是。所以后来果断选择使用hugo引擎来做网站——它的作用是，你给出参数（模型），它负责组装。
不过html和css知识也没有白学，因为对网页结构有了解的话，知道什么是标签，什么是属性和值，以及它们的基本规则，与网页打交道时很有帮助，才有可能根据自己喜好修改主题的细节。
选择Hugo 网站生成器有很多，我看到许多人建站都会经历兜兜转转的过程，工具从wordpress到hexo，再到hugo，再到wordpress&amp;hellip;&amp;hellip;所以我想避免这个坑，于是在开始动手之前花了许久做决定，我的要求是经济、高效、方便——Hugo最适合不过了——静态网页经济安全，Hugo生成速度最快，也不需要服务器。
文件目录 这是每个文件夹存放的内容及其作用的标准格式。
archetypes 在default.md文件中存放文章页面参数 content 存放所有文章，如关于、分类、以及每篇文章 layouts：存放生成页面所使用的模板、参数 _default 页面模板 如list.html是列表页的模板，page.html是普通页的模板 hugo渲染并生成页面的本质：内容+模板=页面 partials 配件模板 如footer.html是页面底部区域的模板，header.html是页面头部的模板 页面模板中常会引用这些配件模板 shortcodes 短代码 在文章中固定格式的简洁代码，如引用bilibili的视频，插入网易云的音乐，所使用的代码存放在这里 这个思维导图，以及顶部的音乐都是短代码的功劳 如有需要，欢迎留言 static img 存放图像 css css模板 css的作用是让页面更漂亮，就像穿了新衣服 js JavaScript themes 存放所有的主题 代码 Hugo 查看版本：hugo version 新建库：hugo new site 666 在当前目录下，新建一个名为&amp;quot;666&amp;quot;的文件夹，其中内置应有的结构 新建文章： hugo new post/name.md 意思是在content/post文件夹内，生成一个名为name.md的文件 生成网页： hugo 将在父文件夹中生成public文件夹，存放着已经渲染好的所有页面 查看效果： hugo server 返回一个网址，你可以使用自己的浏览器来实时查看自己的页面效果 主题 我用的笨方法，下载主题zip包并解压到themes文件夹，之后在config文件中设置theme参数为主题名。 Github 初始化配置
cd public git init git remote add origin https://github.</description>
    </item>
    
  </channel>
</rss>
