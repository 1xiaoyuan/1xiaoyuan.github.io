<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 朝闻道</title>
    <link>https://1xiaoyuan.github.io/categories/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 朝闻道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Dec 2023 19:43:43 +0800</lastBuildDate><atom:link href="https://1xiaoyuan.github.io/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>处理信息的软件体系与理念</title>
      <link>https://1xiaoyuan.github.io/archives/%E5%A4%84%E7%90%86%E4%BF%A1%E6%81%AF%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E4%B8%8E%E7%90%86%E5%BF%B5.html/</link>
      <pubDate>Mon, 25 Dec 2023 19:43:43 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E5%A4%84%E7%90%86%E4%BF%A1%E6%81%AF%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E4%B8%8E%E7%90%86%E5%BF%B5.html/</guid>
      <description>灵感碎片：有价值的垃圾 今日金句：很多人觉得学了很多理论，领悟非常深，其实，不过是一堆看起来有价值的垃圾而已。
像“L先生说”这种分享情绪、智识、成长知识的博主，或《认知觉醒》这种成长类书籍，以后可能就不看了。
成长类的东西变着方式说，不如掌握一门技术实在。
碎片灵感：接纳一切，经常在心中默念“我不管你你就对我没有影响”。 即使是正确的执念，也要放手。
知识管理之——软件用多少 我的工具使用理念是“定位清晰”，避免 All In One .🚩
定位清晰包括“做什么和不做什么”，有时候不做什么比做什么更重要，什么都做往往会晕头转向。
用浏览器举例子，电脑端我使用了三个浏览器，它们各司其职。
Edge：插件多，用来搜索、下载资料（文字、图片、视频等），逛社区、看视频、玩。 Chrome：简洁，用来做“和遣词造句（写作）相关的事”。 Firefox：简洁，用来学习，阅读。 今天在桌面新建了一个txt文件，命名为今日blog，所有碎碎念都写在这里，然后第二天清零。
不想用 flomo ，因为什么东西都丢进去，会让人不想打开； 不想用编辑软件（VS Code、Obsidian），太重了，而且目录中会显示许多文档，注意力不能 100% 专注在写作上。 发现一个 txt 文件特别专注！！ 我的信息系统之——用了哪些工具 下面用我的信息管理体系来举例👇
flomo ，只用来记录随便知识，不做读书摘录。我赋予它的定位是“存放对写作有帮助的信息”，主要使用的功能是“免费的多端同步”； 一本日记，只用来写碎碎念，不写日记。我赋予它的定位是“存放碎碎念、思考”，主要使用的功能是“往年今日、上个月的今天、三个月前的今天、随机一篇日记”和“分类、标签、日记标题”，这些功能非常适合回顾自己的所思所想，此软件我已付费（往年今日、导出 markdown 等功能）； Excel，只用来写晨间日记。这里是只要回顾就有收获的内容，我赋予它的定位是记录事实——“事件+情绪+原因+反思”； Obsidian，只用来写作。这里存放和写作相关的摘录、思考和输出，我赋予它的定位是“面向输出的工具”； Notion，只用来备份资料。这里存放网络上值得备份的文字资料，防止原作者删除，我赋予它的定位是“个人知识库，维基百科”，收藏功能要慎用； 幕布，用来写读书、学习摘录。读书摘录和面向写作的摘录不同，因为一本书的知识可能涉及多个领域的知识，能写作的方向有许多（以后可以展开写这部分）； VS Code，只用来写博客。我对博客的定位是“对某人有帮助的经验”（这个人更多的是我自己）。我觉得每个人都应该为自己建造一座游乐场，可以持续获得精神满足感，所以我希望写博客能成为我的精神家园。 可话，只用来分享日常和总结知识碎片。我对可话的定位是“培养分享欲”。虽然只有不足20个好友，但这里有相谈甚欢的好友，很有动力。 至于博客有没有人看到，也许要很久之后吧——把网址放在网络或告诉你。或者如果你独自见到了我的博客，看来是有缘人，可以交个朋友，先发个邮箱吧。
为什么不用日记/笔记APP写日记？ 我尝试换过许多软件写日记，最终都无法满足这样或那样的痛点：
无论纯文本还是富文本，事件的原因和反思的展示都不直观； 窗口展示太局限，一次只能看一天的日记，并且按日期为目录，看一篇日记就要点进去一篇； 太折腾了，纠结于日记的本地存档 有时候想简单写几句话留下教训，有时候想流水账，有时候想写长篇思考，这几种东西放到一起很混乱，不想打开日记/笔记软件； 后来我决定，反思的内容要独立在任何软件之外，并且这个软件最好不是日记或笔记软件，而 Excel 就是很好的替代。灵感源自《晨间日记的奇迹》一书。
一口气写了这么多，完全的心流状态，看来用 txt 文件写面向博客的碎碎念是个不错决定。txt文件没有“灵魂”，正是它最棒的地方。
不能强迫自己写，只在想写的时候动笔。</description>
    </item>
    
    <item>
      <title>分类和标签的用法</title>
      <link>https://1xiaoyuan.github.io/archives/%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE%E7%9A%84%E7%94%A8%E6%B3%95.html/</link>
      <pubDate>Sat, 23 Dec 2023 17:49:41 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE%E7%9A%84%E7%94%A8%E6%B3%95.html/</guid>
      <description>对分类和标签的使用 书接上回，写完 我来了，Xlog 这篇文章后，我又对所有文档的分类和标签进行的优化。
首先对于“分类”和“标签”这两个功能，我的理解是👇
分类用来对文章进行 方向/维度 的划分； 标签通过关键词（对文章）进行主题上的划分。 分类是提前设定的框架，是给自己的一种提示：以后写这几个方面的内容，不要写偏了。
常见的分类有“工作、学习、生活”，“修身、齐家、治国、平天下”等。
根据我写博客的需求，我为自己设定的的分类如下👇
生活：和生活、经历相关的内容，有助于了解我的生活； 思考：精彩内容摘录、读书笔记、个人思考等，有可能为读者提供思考材料的信息； 工具：软件、方法、技巧等，有可能为读者提供解决方案的信息。 相比分类，标签更为具体，方便快速锁定一个主题相关的内容，如“读书笔记”、“Hugo”、“知识管理”等。
标签不需要提前设定，而是根据写作内容，每次打上标签，让其自然生长。
标签的数量要尽可能少（避免眼花缭乱），描述要尽可能精确，精确到一个 主题/话题/问题。</description>
    </item>
    
    <item>
      <title>我来了，xlog</title>
      <link>https://1xiaoyuan.github.io/archives/%E6%88%91%E6%9D%A5%E4%BA%86xlog.html/</link>
      <pubDate>Sat, 23 Dec 2023 16:53:42 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E6%88%91%E6%9D%A5%E4%BA%86xlog.html/</guid>
      <description>Xlog 博客 今天发现了 Xlog 这个平台，这个平台的理念是为创造者提供一个公开交流的博客社区，它的优势在于👇
安全。所有数据存放在区域链中，只有创作者本人的私钥才能访问，可随时导出。 自定义域名。不用买域名了，该域名也没有次数限制。 优雅的编辑体验。提供实时预览的双栏编辑框，采用 markdown 语法，支持音视频等。连床图都不用买。 快速上传。几乎可以说是Hugo的升级版了，不用再敲 Git 指令上传了，直接在网站上创建文档、书写、发布即可。太便捷了。 然后根据 《五分钟拥有一个区块链和 IPFS 上的去中心化博客》 的操作指南，分别注册了 Wallet、xlog，领取了 $CSB，然后开通我的 xlog 站点。
建议参考上面的操作指南来搭建。
点击后面的链接即可访问我的 Xlog ，欢迎关注：阿蒙的xlog。
值得一提的是，需要翻墙才能成功登录 Wallet 。如果有翻墙的需求，可以在 Edge 中安装一个 greenhub 插件。
我把自己博客的所有文档上传到 Xlog 之后才发现，标签打的有点随意。又想起来自己博客的分类功能用不了（categories）,索性今天就处理一下这个问题吧！
Hugo 博客分类页面 以下是对 https://spider666.icu/ 这个博客记录。
问题描述：“标签页面”可以正常访问，“分类页面”的入口在“标签页面”里，&amp;ldquo;标签页面&amp;quot;可以访问，但三个分类按钮（生活、思考、工作）返回是 404 提示。在本地运行也是同样的现象。
分析过程：已知所有页面的模板都存放在 layouts/_default/ 目录，标签页面和分类页面都属于页面，所以它们都使用该目录下的某个模板。
标签页面使用的是 tags1.html 模板，而在 content/ 目录下存在一个 tags.md 文件引用了 tags1 模板， 分类页面使用的是 list.html模板，而在 content/ 目录下没有引用该模板的文件。 经过检查，所有模板都没有语法错误。所以，点击分类按钮，打不开页面的原因就是没有在 content/ 目录下创建一个 .md 文件并引用 list.html 模板。
解决：所以在 content/ 目录下创建一个 categories.</description>
    </item>
    
    <item>
      <title>flomo标签系统设计</title>
      <link>https://1xiaoyuan.github.io/archives/flomo%E6%A0%87%E7%AD%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html/</link>
      <pubDate>Wed, 06 Sep 2023 09:00:33 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/flomo%E6%A0%87%E7%AD%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html/</guid>
      <description>我回来了，flomo 以上是我的两个 flomo 账号，听我细细讲来两个账号被舍弃的原因
图 1 账号：标签混乱，且由于是初次使用，不假思索地记录内容，没有想过日后整理的不宜，导致这个号成了一个文字垃圾站。虽然期间删除过 300 个 memo ，但仍然混乱不堪。 图 2 账号：标签系统和我已经很融洽了，只是还差最后一神来之笔，所以这个 APP 被搁置了两个月。 我和 flomo 认识已经快要两年了，也是因为它我才接触到了卡片笔记。《卡片笔记写作法》我也已经读过两遍半了，每次读都会有新的收获。在我的经验中，卡片笔记法一点也不简单，想要用好这个方法，至少需要做两件事：系统的标签系统、完善的记录/操作方法。
2023-09-08，我登录了第二个账号，还是对标签有不满。突然我灵机一动，对标签系统稍作修改之后，整个标签体系搭建完成。
标签体系解读 所有“置顶标签”都是索引卡片。（红色） 所有以“0”为开头的标签都是内容卡片。（蓝色） 举个例子
置顶标签 1.复盘 的子标签包括： 1.复盘/决策日志，1.复盘/人生系统，1.复盘/生活观察记。这些子标签都可以在全部标签中找到，它们的共同特征是：都是以“01.”为开头的标签，如 01.决策日志。
卡片笔记的重点就在于，有两个卡片盒，一个用来存放内容本身，一个用来存放经过思考后对知识的串联（索引卡片）。而我就是要利用“置顶”这个功能和数字排序这两个设计，在一个软件中制造出两个卡片盒。</description>
    </item>
    
    <item>
      <title>一种纵向记录生活的方案</title>
      <link>https://1xiaoyuan.github.io/archives/%E4%B8%80%E7%A7%8D%E7%BA%B5%E5%90%91%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB%E7%9A%84%E6%96%B9%E6%A1%88.html/</link>
      <pubDate>Mon, 21 Aug 2023 11:58:26 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E4%B8%80%E7%A7%8D%E7%BA%B5%E5%90%91%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB%E7%9A%84%E6%96%B9%E6%A1%88.html/</guid>
      <description>日记的目的 想创造属于自己的人生，首先要自己设定一个剧本，也就是我们所说的“规划”。
无论是学业规划、职业规划、事业规划，简单地说，一个规划至少包括三部分：目标、实施方案、达成的结果。
现在我假设所有规划已经完备，下一步就是行动，不过在行动之前还有一件事——造一个实时监测系统，确保自己走在正确的路上。
今天的主角——写日记——就是一种检测系统。
清晰目标完成进度：简单记录了“消耗的成本+行动的内容+取得的结果”的日记，就可以让我们从一组数据中得出行动的进展。 找到错误漏洞：异常的数据告诉我们的是“阻碍进步的关键原因”。 记录是为了复盘，怎样记录最有效率呢？
我认为有效的复盘记录应具有以下性质👇
可检索（通过日期、文字搜索内容） 实用性（内容能够应用于现实） 易记录（PC、手机多端同步） 易复盘（针对每件事，可以直观地看到1年内、1个月中自己哪些天做了、结果如何） 事件明确 我用过的日记方式 方式一：复盘模块化日记 （类似于九宫格日记）
2023-08-21
工作方面：&amp;hellip;&amp;hellip; 学习方面：&amp;hellip;&amp;hellip; 情感方面：&amp;hellip;&amp;hellip; 兴趣方面：&amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip; 这种方式的优点：
分类明确，阅读时结构清晰。 这种方式的缺点：
只能以日为单位查看每天的流水账，想要查看“投资知识的学习情况”，就必须一天一天地看，然后汇总到一个文件上，再进行复盘总结。 每天的记录目标不明确，今天阅读了，明天跑步了，但今天没有跑步、明天没有阅读。假如我每次想知道哪些天跑步了、哪些天阅读了，就需要一天天地查看。 总之，想要复盘一件事很麻烦。 方式二：感悟式日记
2023-08-21 今天第一次坐夜班的高铁，窗外黑漆漆的什么也看不到。 当我来到郑州时，刚好播放到《吹梦到西洲》这首歌，我好喜欢这首歌，喜欢它不仅仅是因为是今天恰好播放，还有明天将要进行的泰山之旅。 为明天的泰山之旅，期待并加油！
这种方式的优点：
随心所欲，像聊天一样记录，最有可读性的日记。 这种方式的缺点：
不适合用于复盘的事件。 方式三：感悟+复盘模块式日记
2023-08-21
今日感悟：今天第一次坐夜班的高铁&amp;hellip;&amp;hellip; 工作方面：&amp;hellip;&amp;hellip; 学习方面：&amp;hellip;&amp;hellip; 情感方面：&amp;hellip;&amp;hellip; 兴趣方面：&amp;hellip;&amp;hellip; 这种方式的优点：
将前两种方式组合起来，用一个文件写日记。 这种方式的缺点：
虽然能较为全面地记录每日的感悟和复盘的事件，但复盘某件事时，仍然很麻烦或者需要二次整理； 解决问题时的思路 我在想，日记和笔记的内核应该是相同的，日记用于记录发生在我们身上的事，笔记用于记录被我们学习的知识。
将笔记和日记放在一起看，会产生什么呢？
先来说一说笔记的特点，在新高考之前的高中阶段，理科有“语数外物化生”6们学科，所以学生会至少准备六个笔记本。
再来说一说日记的特点，我们一般只会用一个日记本/日记软件。（除非纸用完了）
为什么学习6门课就要至少6个笔记本？而日记不能用6个日记本？
反过来想一想，如果我们6门课用1个笔记本会发生什么？所有科目的笔记必须“以日期为单位”记录在同一个笔记本上，就像写日记一样。期末想要复习某一门单独的课，就需要二次整理（把语文整理在一起、数学整理在一起&amp;hellip;&amp;hellip;）。这不就舍近求远了吗？
我们完全可以准备多个笔记本，一个笔记本只记录一门课的知识。这样对复习效果、阅读体验才友好。
这给了我一个启发，为啥我不能多用几个日记本嘞？？
如果把复盘和复习联想到一起，很容易得出这一个答案：复盘类日记适合用一个单独的日记本记录。
也就是说我想记录跑步，就专门用一个《跑步日记本》，我想记录阅读，就专门用一个《阅读笔记本》&amp;hellip;&amp;hellip;
最终的解决方案 根据用途的不同，创造多个日记本。
将用于复盘的日记和用于记录生活感知的日记分开，每种日记用一个日记本/日记文件。
我用 WPS 的 Excel 记录用于复盘的数据（复盘式笔记），模板如下，一个Excel文件中创建12张表，对应12个月，每张表中有未来10年；
如果你觉得Excel打开不方便，推荐使用一个习惯记录类APP来做这件事，安卓端推荐“今日习惯”App。
感悟式日记，用日记软件（一本日记APP），按照前面说的“方式二”记录。</description>
    </item>
    
    <item>
      <title>一本时间管理书的精髓</title>
      <link>https://1xiaoyuan.github.io/archives/%E4%B8%80%E6%9C%AC%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E4%B9%A6%E7%9A%84%E7%B2%BE%E9%AB%93.html/</link>
      <pubDate>Tue, 01 Aug 2023 10:03:12 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E4%B8%80%E6%9C%AC%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E4%B9%A6%E7%9A%84%E7%B2%BE%E9%AB%93.html/</guid>
      <description>本篇文章主题：有根据、有条理地制定任务列表。以及兼容工作和生活的小技巧。
明确目标 写下自己的年度目标和月度目标和完成目标，以及关键结果。（注意这是两个要求）
必须明确自己的目标，有方向才不会迷路，有目标才不会漫无目的地浪费时间。 必须知道完成目的需要做什么，x+y=z，从取得结果 z 倒推需要完成的条件 x , y 。 example1：使身体更健康是目标，【达到 70 kg体重、睡眠时间保持 7h 以上、跑步5公里，配速达到4公里/分钟】是关键结果。 example2：通过考试是目标，【数学130分、英语70分】是关键结果。 example3：背500个单词是目标，【一个月后词汇量提升至xxxx】是关键结果。每天的背诵数和背单词的目标关系并不大，这是一个误区。
example4：做10套模拟卷是目标，【平均分从60提高到80】是关键结果。
将目标分为长期目标和短期目标
每周、每月都要为长期目标进行为目标分配时间的行为。 每周将任务落实到每天——只写必须必须要完成的 每月将任务落实到每周 每天都要为短期目标做准备/规划。 每天晚上制定次日的列表 每天早上回顾今天的列表，按照优先级行动 step1（写下目标和关键结果）制定长期目标
月度目标：学完一本概率论并自己制作思维导图；阅读《X》、《Y》两本书并读懂、并写感悟。 周目标：第 1 周学习概率论前 3 章；第 1 周阅读《X》的前 200 页。 step2（为每天分配任务）制定短期目标
第 1 周第 1 天需要&amp;hellip;.第 2 天需要&amp;hellip;&amp;hellip; 任务列表的要素 &amp;amp; ABC清单 任务列表必须明确，具体，可衡量，实操性强，需要做以下工作：
区分优先级——下面介绍实操性 ABC 清单。 确定截止日期——每个人物都要有明确的日期，且建议每个任务都提前完成。 设定完成任务所应取得的关键结果——比如背单词的可衡量结果是词汇量提升200。 事不过三——秉持重要的事情不超过三件的原则，把时间用在 20% 真正重要的事情上面。 接收到任务后立刻写在Inbox清单中。 任务列表不是一成不变的，甚至每小时都可以根据现状更新一次任务列表。 ABC清单是一种区分优先级的方法，我个人认为这种方法比当下流行的四象限方法更有实操性，对选择困难症来说非常友善，毕竟比四象限少了一个选择。
ABC清单的核心本质是：能带来报酬的任务就是优先重要的任务（80%的报酬来自于仅仅 20%的工作）。
使用步骤：
写下所有任务，进行 ABC 分类； 只做 A 任务； 如果 A 任务全部完成，从 B 任务中挑选任务升级为 A 类任务继续执行。 A 类任务：对某些人物（自己或他人）非常重要，且时间上紧急的任务。A 类任务最多 3 个。 B 类任务：重要但时间上不紧急的任务。A 类任务完成后就去 B 类中挑任务升级为 A 类。 C 类任务：对人不重要的任务。如果有人再提起，就升为 B 类，否则永远不打开。</description>
    </item>
    
    <item>
      <title>简化 Hugo 常用操作的方法</title>
      <link>https://1xiaoyuan.github.io/archives/%E7%AE%80%E5%8C%96-hugo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%96%B9%E6%B3%95.html/</link>
      <pubDate>Sat, 29 Jul 2023 09:41:28 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E7%AE%80%E5%8C%96-hugo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%96%B9%E6%B3%95.html/</guid>
      <description>我使用的博客工具 hugo：博客网站生成工具 vscode：文件编辑工具 git：上传文件到Github的工具 shell语言：编写一键完成指令代码 使用 vscode 和 git ，每次更新博客都需要输入一连串重复的代码，那么下面的内容可能会对为此而苦恼的用户有所帮助。
使用vscode和git的不方便之处 每次新建文件都需要在vscode的终端输入hugo new posts/新文件名.md来创建新文件 每次上传文件都需要在vscode的终端输入至少5个指令&amp;hellip;&amp;hellip;hugo、cd public、git add .&amp;hellip;&amp;hellip; 如果每修改并上传一次就要输入5个指令，这很令人产生不快，厌倦 那么有没有比较好的解决方案呢？ 答案是肯定的。
解决方案 一键创建新文件 1、首先，在博客的顶级文件夹创建new.sh文件 2、在文件中输入以下内容
time=$(date &amp;#34;+%Y-%m-%d&amp;#34;) echo $time hugo new posts/$time.md exit 3、每次新建文件时，在终端输入new再按Tab键，然后按回车键，即可在posts/目录中新建以当天日期为文件名的新文件。
一键上传文件 1、首先，在博客的顶级文件夹创建hugo.sh文件 2、在文件中输入以下内容
hugo time=$(date &amp;#34;+%Y-%m-%d %H:%M:%S&amp;#34;) echo $time cd public git add . git commit -m &amp;#34;自动执行构建脚本 🎓$time&amp;#34; git push exit 3、每次更新（上传）文件时，在终端输入hugo再按Tab键，然后按回车，即可将更新的博客自动上传至Github，并以当时的日期为更新备注。
如有问题，请通过邮箱联系。</description>
    </item>
    
    <item>
      <title>Web前端基础——我们是怎样访问网页的</title>
      <link>https://1xiaoyuan.github.io/archives/web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E6%A0%B7%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E7%9A%84.html/</link>
      <pubDate>Fri, 10 Feb 2023 12:18:53 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E6%A0%B7%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E7%9A%84.html/</guid>
      <description>以静态网页为例。
Html 文件 Html 文件是可以被浏览器读取后生成静态网页的文件。该文件使用 Html 语言编写，html 语言被称为超文本语言，&amp;ldquo;超&amp;quot;体现在这种语言在纯文本的基础上添加了结构化的语法——标签——来赋予纯文本标题、段落、菜单、列表、链接等结构化属性。此外，Html 文件还支持嵌入图像、视频等。
服务器 服务器是一台联网的、用于储存文件的电脑。 服务器是一个联网的、专门用于储存文件的电脑（大小像一个盒子）。每个服务器都有独特的 Ip 地址，用于交互。
补充
静态网站服务器是指，文件保持原样传送给用户。 动态网站服务器在硬件和 http 软件之外加入新功能，常见应用服务器和数据库。发送文件会进行更新。 Ip 地址 Ip 地址是一个 32 位的二进制数（这决定了人很难记住它）。 Ip 地址就像是每个人的电话号一样，每一个人的电话号都唯一。
同样，每台联网的电脑都有一个唯一的 Ip 地址。只要知道了这个地址，我们就能知道储存在网络上的文件的位置。
Url 地址 url 是一个简单化的互联网资源定位器，俗称网址，可与 Ip 地址关联（解决了 Ip 地址不方便人记忆的问题）。
url 的组成：协议+域名+资源路径。
如 wendys.love 是域名， https://wendys.love 是协议+域名， https://wendys.love/archives/hello-world.html/ 是协议+域名+资源路径。 一般情况下，可以不输入协议直接访问。还有 https 协议要比 http 协议安全些。 同样，互联网上的每个文件都有唯一的 Url。 浏览器 浏览器是解析、渲染 html、css 等文件的工具，也是解析 url 的工具，是客户端（用户）和服务器端产生交互的桥梁。
用户通过向浏览器输入 Url（网址），浏览器解析出 Url 对应的 Ip 地址，并向该 Ip 发送交互请求，以求获得访问文件的权限。
我们访问网页的过程可以描述为：</description>
    </item>
    
    <item>
      <title>博客的CDN加速方案</title>
      <link>https://1xiaoyuan.github.io/archives/%E5%8D%9A%E5%AE%A2%E7%9A%84cdn%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88.html/</link>
      <pubDate>Thu, 05 Jan 2023 20:36:23 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E5%8D%9A%E5%AE%A2%E7%9A%84cdn%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88.html/</guid>
      <description>小白互助😄
Oh，我的网站好慢呐 博客搭在Github的一个缺点是网页访问速度慢，为了解决这个问题，可以借助CDN。
网页为什么慢，简单地说，就是服务器（Github服务器在国外）和客户端（访问网站的用户）距离太远，资源拉取慢。
CDN，即内容分发网络。它的功能是将指定的资源提前缓存到分布在各个城市的站点（缓存服务器）。这样一来，在用户在访问网站后，数据将直接从距离最近的服务器中获取，无需再从原来那个远在天边的源服务器获取（如果它真的远在天边的话）。
ok，那么接下来的问题就是找到一个能白嫖的CDN了，嘻嘻。
jsdelivr（已弃用） 现在该轮到今天的主角了——jsdelivr。
配置起来及其简单，你不需要下载任何软件、申请任何账号，甚至只需要在浏览器的地址栏，按照要求的格式输入代码（其实就是一个网址/url），即可将你Github page上的博客文件上传到jsdelivr的服务器，然后使用他们的服务——CDN加速访问你的博客文件。
如果你的博客也搭建在Github，那么下面的内容对你会有所帮助。
首先，为你的Github的博客仓库发布一个release版本（只有这样才能使用jsdelivr）（很简单，需要你自行上网搜一下），然后我来告诉你需要在浏览器地址栏输入的代码：
注意：下面“你的Github名”、“你的仓库名”、“@发布的版本号”都需要你按照自己的Github来输入，你可以参考该文章末尾处最后一个代码（我的用法）。
如果想上传博客文件库的某个版本： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/ 或者上传版本中的某个文件： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/文件名+后缀 或者上传版本中的某个文件夹： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/文件夹名/ 注意结尾的 / 号是必须有的。
成功后会出现已上传的文档页面。然后你可能就会发现自己的网页打开速度飞快，至少比上次快。
使用以下代码可以直接上传整个仓库的文件，并且实时更新文件，而不是一次上传一个版本，事实上我觉得这是最方便的做法。
https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/
比如我是这么用的：https://cdn.jsdelivr.net/gh/1xiaoyuan/1xiaoyuan.github.io/
这是后来我才发现的，去掉版本号可以直接上传整个仓库🤷‍♂️ 实时更新真的太爽了。
新方案：cloudflare 2023-07-30，将新域名用 cloudflare 进行CDN托管，速度大大提高。</description>
    </item>
    
    <item>
      <title>Python正则表达式pattern分类</title>
      <link>https://1xiaoyuan.github.io/archives/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fpattern%E5%88%86%E7%B1%BB.html/</link>
      <pubDate>Tue, 03 Jan 2023 21:52:45 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fpattern%E5%88%86%E7%B1%BB.html/</guid>
      <description>网上的相关资料非常多，但都很乱。于是我做了个分类，一来自己方便查看，二来看到此文章的同仁也能省去些麻烦。
提示：正则表达式中的 pattern 参数通常都包含反斜杠，为了防止它们被识别为转义字符，最好使用原始字符串 r&#39;&#39; 来表示它们。(如 r&#39;\t&#39;，等价于 \\t )匹配相应的特殊字符。
使用原始字符串的优点是可以少写\号，代码阅读起来也更容易些。
正则表达式四大功能：匹配(bool值)、获取、替换、分割。
匹配单个字符 . ：表示任意一个字符。如表达式&#39;t.o&#39;，too或&#39;two&#39;都符合条件。 [&amp;hellip;]：匹配[]中列举的所有字符中的一个。 一个[]表示一个字符：[amk] 匹配 &amp;lsquo;a&amp;rsquo;，&amp;rsquo;m&amp;rsquo;或&amp;rsquo;k&amp;rsquo;。[a-zA-Z0-9]表示所有字母+数字。[A-Z][a-z]表示第一个字符为大写字母，第二个字符为小写字符，即两个字符。 注意无需使用 , 分割内容，[0-35-9] 表示0~3与5~9。 可以用 - 给出范围。如 [abc] 和 [a-c] 含义相同。 [^&amp;hellip;]：不在[]中的字符中的一个。 [^abc] 匹配除了a,b,c之外的字符。 匹配单个字符——它们可以写在字符集[]中 \w： 匹配数字字母下划线。等价于[a-zA-Z0-9_]，在Unicode字符中还可以匹配汉字、全角数字。 \W：匹配非数字字母下划线，等价于[^A-Za-z0-9_]。 \s：匹配任意空白字符、空格、tab键。等价于[\t\n\r\f]。 \S：匹配任意非空字符，等价于[^\t\n\r\f]。 \d：匹配任意数字，等价于 [0-9]。 \D：匹配任意非数字，等价于[^0-9]。 匹配多个字符 *：匹配*号前一个字符出现至少 0 次的表达式。如表达式abc*，匹配值ab，abccc。 +：匹配前⼀个字符出现 1 次或者⽆限次。如表达式abc+，匹配值abc，abccc。 ？：匹配前⼀个字符出现 1 次或者 0 次，即要么有 1 次，要么没有。非贪婪。 {m}：匹配前⼀个字符出现 m 次。如表达式ab{2}c，匹配值abbc。 {m,}：匹配前面表达式至少 m 次 {,n}：匹配前面的正则表达式最多 n 次 {m,n}：匹配前⼀个字符出现至少 m 至多 n 次。如表达式ab{1,3}c，匹配值abc，abbc，abbbc。 特殊匹配 | ：匹配左右任意一个表达式。如匹配0-100之间的数字，表达式re.</description>
    </item>
    
    <item>
      <title>手写笔记如何避免杂乱无章</title>
      <link>https://1xiaoyuan.github.io/archives/%E6%89%8B%E5%86%99%E7%AC%94%E8%AE%B0%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%9D%82%E4%B9%B1%E6%97%A0%E7%AB%A0.html/</link>
      <pubDate>Sat, 31 Dec 2022 19:06:18 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E6%89%8B%E5%86%99%E7%AC%94%E8%AE%B0%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%9D%82%E4%B9%B1%E6%97%A0%E7%AB%A0.html/</guid>
      <description>使用笔记本比较头疼的地方是：
结构混乱。有些内容是后来才意识到并补充的，但距上次相关内容的笔记记录很久了，新笔记与旧笔记之间有许多其他方面的笔记，导致两者相距甚远。 内容不明确。不知道一个笔记本适合记录几门知识，不知道相同门类知识该不该分行在一块记录。 具体使用方法 拿一个新笔记本，在页脚进行页码标注。
1~4页设为为索引页；5~8设为计划规划（按需使用，也可无此部分）。
第9页之后记录知识笔记。
不必为了某部分知识的连贯性，而专门为了“未来才学习到的知识”留下空白页。按照页码顺序记录每天学习的知识即可。
对于分散的、有关联的知识，只需将其页码一起标注在索引页，就能将所学的知识结构化串联起来。通过索引页随时可以找到相关的知识。
如果你已经理解我所说的不用在意顺序的记录方法，那么对于一个打卡计划、摘抄、备忘购物清单等等任何东西，你都可以记录在笔记本上，只需在索引页标注即可。
你可能会问“知识的记录是凌乱分散的，这样对学习有什么好处呢？”这是一个好问题。 放心，知识因为随意记录变得没有结构、没有联系，而索引页会让它们而变得结构分明，甚至比只按顺序却没有索引（目录）的笔记更有结构。
如果有打卡等记录习惯，请用好日历，因为“你的日历比你的银行账户更能衡量成功。”
索引页举例 1~4：索引页 5~8：计划 9~20：2023年1月的所有记录&amp;hellip;&amp;hellip; 21~35：2023年2月的所有记录&amp;hellip;&amp;hellip; 30：健身21天打卡计划 36~50：2023年3月的所有记录&amp;hellip;&amp;hellip; 总结收获 建议每周都必须做总结，可以使用一个新本子，每月也必须做总结。请大家想想，如果宝贵的经历没有主动总结为经验，使其慢慢从人生中消失，和每次都踏踏实实积累经验比起来，哪一个会先接近梦想成真？
列计划是一个循序渐进的过程，一开始很难完成列的全部计划，不要给自己增加负担。因为之所以要列计划，就是为了验证出自己真实的效率。比如你会发现通常每天计划做7个事情，你只能做4个（实际），然后你就能得出一个客观的结论：自己努努力，每天最能做5个计划。
更深入地分析，你就能知道完成某项计划大概需要花费多长时间，这就有利于指定更大维度的计划（如一年），并且降低误差。
除了总结出自己的真实效率，还要总结被干扰的原因。苏格拉底早在两千多年前就说过“认识你自己”，自我认识是一切的自我发展基础，我们需要知道自己的缺点、短板，从逻辑角度来说，人只有在认识自我和洞察自我之后，才可能去做出改变。从而实现自我，超越自我。
我的总结与规划不在同一个笔记本。</description>
    </item>
    
    <item>
      <title>常用电脑小技巧——快速搜索网页、打开常用应用</title>
      <link>https://1xiaoyuan.github.io/archives/%E5%B8%B8%E7%94%A8%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80%E5%B8%B8%E7%94%A8%E5%BA%94%E7%94%A8.html/</link>
      <pubDate>Sat, 12 Nov 2022 00:29:17 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E5%B8%B8%E7%94%A8%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80%E5%B8%B8%E7%94%A8%E5%BA%94%E7%94%A8.html/</guid>
      <description>抛开效率应用不谈，最节省时间的办法是多用键盘，尤其是win键（对windows用户而言）。
任务栏搜索 任务栏左下角的搜索框，既能搜索并打开本地应用和服务，又能当作互联网搜索引擎使用。使用win键+输入文字也可以直接使用该功能。
使用方法：
按下win键，然后直接用键盘打字，内容可以是
一个软件名字的一部分：如微，wx，微信，然后会出现对应的本地程序以及网页搜索建议。按下回车就能打开微信。 一个服务：如控制，控制面板，kzmb，然后会出现对应的服务以及网页搜索建议。 再也不用怕有些很难找到具体位置的服务了。 一个搜索：如平凡之路，然后会出现网页搜索推荐。 这样一来，打开常用的软件、服务，就能这样加快速度了。
搜索某个问题，也不用再打开新页面，再点击搜索框后，再输入了。一个win键简化前两个步骤。
浏览器快速搜索 现在的主流浏览器是 Edge 和 Chrome ，我使用它们浏览网页，想要搜索一个概念或问题，就需要另开一个新网页再搜索，甚是麻烦。
下面提供一种在原页面进行搜索的方法。
Ctrl + E 打开地址栏快捷搜索； 输入想搜的问题； Alt + Enter 在新标签页打开搜索内容。 如果第3步直接用Enter，当前页面会被刷新。</description>
    </item>
    
    <item>
      <title>Hugo使用经验</title>
      <link>https://1xiaoyuan.github.io/archives/hugo%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html/</link>
      <pubDate>Wed, 02 Nov 2022 14:42:35 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/hugo%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html/</guid>
      <description>为了防止时间太久忘记方法，建站的关键知识点还是要记录一下的。
大人，时代变了 最初我打算自己写出整个网站（现在想想真傻），于是学了一些html和css知识。后来打开第一个txt文件准备动手写主页html文件时，我发现，我一点也写不下去，几个标签下来就厌倦不已，想完全掌握并熟练运用这些知识需要很长时间，就算掌握了它们，写出漂亮页面还需要想象力和创造力——短期内根本不可能写出完整的网页。最重要的是它们非常繁琐，一个人要投入多少时间精力才能搞定所有工作啊！
后来看到网友的一句话——独自造轮子的时代已经结束了，前人已经帮你把模型调好了——我才恍然大悟。我们这个时代太快了，闭门造车的做法很是愚蠢，学会借力前行才是。所以后来果断选择使用hugo引擎来做网站——它的作用是，你给出参数（模型），它负责组装。
不过html和css知识也没有白学，因为对网页结构有了解的话，知道什么是标签，什么是属性和值，以及它们的基本规则，与网页打交道时很有帮助，才有可能根据自己喜好修改主题的细节。
选择Hugo 网站生成器有很多，我看到许多人建站都会经历兜兜转转的过程，工具从wordpress到hexo，再到hugo，再到wordpress&amp;hellip;&amp;hellip;所以我想避免这个坑，于是在开始动手之前花了许久做决定，我的要求是经济、高效、方便——Hugo最适合不过了——静态网页经济安全，Hugo生成速度最快，也不需要服务器。
文件目录 这是每个文件夹存放的内容及其作用的标准格式。
archetypes 在default.md文件中存放文章页面参数 content 存放所有文章，如关于、分类、以及每篇文章 layouts：存放生成页面所使用的模板、参数 _default 页面模板 如list.html是列表页的模板，page.html是普通页的模板 hugo渲染并生成页面的本质：内容+模板=页面 partials 配件模板 如footer.html是页面底部区域的模板，header.html是页面头部的模板 页面模板中常会引用这些配件模板 shortcodes 短代码 在文章中固定格式的简洁代码，如引用bilibili的视频，插入网易云的音乐，所使用的代码存放在这里 这个思维导图，以及顶部的音乐都是短代码的功劳 如有需要，欢迎留言 static img 存放图像 css css模板 css的作用是让页面更漂亮，就像穿了新衣服 js JavaScript themes 存放所有的主题 代码 Hugo 查看版本：hugo version 新建库：hugo new site 666 在当前目录下，新建一个名为&amp;quot;666&amp;quot;的文件夹，其中内置应有的结构 新建文章： hugo new post/name.md 意思是在content/post文件夹内，生成一个名为name.md的文件 生成网页： hugo 将在父文件夹中生成public文件夹，存放着已经渲染好的所有页面 查看效果： hugo server 返回一个网址，你可以使用自己的浏览器来实时查看自己的页面效果 主题 我用的笨方法，下载主题zip包并解压到themes文件夹，之后在config文件中设置theme参数为主题名。 站内引用文章 知道越多越不快乐？：[知道越多越不快乐](https://1xiaoyuan.github.io/archives/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%95%BF%E5%A4%A7%E5%90%8E%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%8D%E5%BF%AB%E4%B9%90.html/) 引用图片 ![实例](/img/posts/实例.png) Github 初始化配置
cd public git init git remote add origin https://github.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://1xiaoyuan.github.io/archives/hello-world.html/</link>
      <pubDate>Thu, 20 Oct 2022 10:14:28 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/hello-world.html/</guid>
      <description>简简单单，无关风月，听从内心，真情表达。
非常感谢马同学和Rollrock两位大哥的协助，帮我解决了一些建站难题，使得本站的初版得以建立。
我希望将生活的一部分记录于此，不知道互联网能带我走向何处，但一定要留下一些属于我的足迹。如果能与一些人建立新的联系，当然再好不过，这也是我的初心之一。</description>
    </item>
    
  </channel>
</rss>
