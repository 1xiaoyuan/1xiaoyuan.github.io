<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on 朝闻道</title>
    <link>https://1xiaoyuan.github.io/tags/hugo/</link>
    <description>Recent content in hugo on 朝闻道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jan 2024 08:11:54 +0800</lastBuildDate><atom:link href="https://1xiaoyuan.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github本地仓库与网络不同步问题</title>
      <link>https://1xiaoyuan.github.io/archives/github%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98.html/</link>
      <pubDate>Sat, 27 Jan 2024 08:11:54 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/github%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98.html/</guid>
      <description>问题1 在进行Git commit -m &#39;版本信息&#39;操作时，返回了多个以下结果：
warning: in the working copy of &amp;#39;img/index.html&amp;#39;, LF will be replaced by CRLF the next time Git touches it 参考方案：输入git config --global core.autocrlf true。 原文链接：https://blog.csdn.net/u012757419/article/details/105614028
问题2 On branch main Your branch is up to date with &amp;#39;origin/main&amp;#39;. nothing to commit, working tree clean 经常遇到这个问题，之前一直用Git pull就能解决，昨天解决不了，瞎找方案最后 解决了，迷。。。
参考方案
https://blog.csdn.net/weixin_44786530/article/details/129735762 </description>
    </item>
    
    <item>
      <title>我来了，xlog</title>
      <link>https://1xiaoyuan.github.io/archives/%E6%88%91%E6%9D%A5%E4%BA%86xlog.html/</link>
      <pubDate>Sat, 23 Dec 2023 16:53:42 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E6%88%91%E6%9D%A5%E4%BA%86xlog.html/</guid>
      <description>Xlog 博客 今天发现了 Xlog 这个平台，这个平台的理念是为创造者提供一个公开交流的博客社区，它的优势在于👇
安全。所有数据存放在区域链中，只有创作者本人的私钥才能访问，可随时导出。 自定义域名。不用买域名了，该域名也没有次数限制。 优雅的编辑体验。提供实时预览的双栏编辑框，采用 markdown 语法，支持音视频等。连床图都不用买。 快速上传。几乎可以说是Hugo的升级版了，不用再敲 Git 指令上传了，直接在网站上创建文档、书写、发布即可。太便捷了。 然后根据 《五分钟拥有一个区块链和 IPFS 上的去中心化博客》 的操作指南，分别注册了 Wallet、xlog，领取了 $CSB，然后开通我的 xlog 站点。
建议参考上面的操作指南来搭建。
点击后面的链接即可访问我的 Xlog ，欢迎关注：阿蒙的xlog。
值得一提的是，需要翻墙才能成功登录 Wallet 。如果有翻墙的需求，可以在 Edge 中安装一个 greenhub 插件。
我把自己博客的所有文档上传到 Xlog 之后才发现，标签打的有点随意。又想起来自己博客的分类功能用不了（categories）,索性今天就处理一下这个问题吧！
Hugo 博客分类页面 以下是对 https://spider666.icu/ 这个博客记录。
问题描述：“标签页面”可以正常访问，“分类页面”的入口在“标签页面”里，&amp;ldquo;标签页面&amp;quot;可以访问，但三个分类按钮（生活、思考、工作）返回是 404 提示。在本地运行也是同样的现象。
分析过程：已知所有页面的模板都存放在 layouts/_default/ 目录，标签页面和分类页面都属于页面，所以它们都使用该目录下的某个模板。
标签页面使用的是 tags1.html 模板，而在 content/ 目录下存在一个 tags.md 文件引用了 tags1 模板， 分类页面使用的是 list.html模板，而在 content/ 目录下没有引用该模板的文件。 经过检查，所有模板都没有语法错误。所以，点击分类按钮，打不开页面的原因就是没有在 content/ 目录下创建一个 .md 文件并引用 list.html 模板。
解决：所以在 content/ 目录下创建一个 categories.</description>
    </item>
    
    <item>
      <title>简化 Hugo 常用操作的方法</title>
      <link>https://1xiaoyuan.github.io/archives/%E7%AE%80%E5%8C%96-hugo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%96%B9%E6%B3%95.html/</link>
      <pubDate>Sat, 29 Jul 2023 09:41:28 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E7%AE%80%E5%8C%96-hugo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%96%B9%E6%B3%95.html/</guid>
      <description>我使用的博客工具 hugo：博客网站生成工具 vscode：文件编辑工具 git：上传文件到Github的工具 shell语言：编写一键完成指令代码 使用 vscode 和 git ，每次更新博客都需要输入一连串重复的代码，那么下面的内容可能会对为此而苦恼的用户有所帮助。
使用vscode和git的不方便之处 每次新建文件都需要在vscode的终端输入hugo new posts/新文件名.md来创建新文件 每次上传文件都需要在vscode的终端输入至少5个指令&amp;hellip;&amp;hellip;hugo、cd public、git add .&amp;hellip;&amp;hellip; 如果每修改并上传一次就要输入5个指令，这很令人产生不快，厌倦 那么有没有比较好的解决方案呢？ 答案是肯定的。
解决方案 一键创建新文件 1、首先，在博客的顶级文件夹创建new.sh文件 2、在文件中输入以下内容
time=$(date &amp;#34;+%Y-%m-%d&amp;#34;) echo $time hugo new posts/$time.md exit 3、每次新建文件时，在终端输入new再按Tab键，然后按回车键，即可在posts/目录中新建以当天日期为文件名的新文件。
一键上传文件 1、首先，在博客的顶级文件夹创建hugo.sh文件 2、在文件中输入以下内容
hugo time=$(date &amp;#34;+%Y-%m-%d %H:%M:%S&amp;#34;) echo $time cd public git add . git commit -m &amp;#34;自动执行构建脚本 🎓$time&amp;#34; git push exit 3、每次更新（上传）文件时，在终端输入hugo再按Tab键，然后按回车，即可将更新的博客自动上传至Github，并以当时的日期为更新备注。
如有问题，请通过邮箱联系。</description>
    </item>
    
    <item>
      <title>Web前端基础——我们是怎样访问网页的</title>
      <link>https://1xiaoyuan.github.io/archives/web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E6%A0%B7%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E7%9A%84.html/</link>
      <pubDate>Fri, 10 Feb 2023 12:18:53 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E6%A0%B7%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5%E7%9A%84.html/</guid>
      <description>以静态网页为例。
Html 文件 Html 文件是可以被浏览器读取后生成静态网页的文件。该文件使用 Html 语言编写，html 语言被称为超文本语言，&amp;ldquo;超&amp;quot;体现在这种语言在纯文本的基础上添加了结构化的语法——标签——来赋予纯文本标题、段落、菜单、列表、链接等结构化属性。此外，Html 文件还支持嵌入图像、视频等。
服务器 服务器是一台联网的、用于储存文件的电脑。 服务器是一个联网的、专门用于储存文件的电脑（大小像一个盒子）。每个服务器都有独特的 Ip 地址，用于交互。
补充
静态网站服务器是指，文件保持原样传送给用户。 动态网站服务器在硬件和 http 软件之外加入新功能，常见应用服务器和数据库。发送文件会进行更新。 Ip 地址 Ip 地址是一个 32 位的二进制数（这决定了人很难记住它）。 Ip 地址就像是每个人的电话号一样，每一个人的电话号都唯一。
同样，每台联网的电脑都有一个唯一的 Ip 地址。只要知道了这个地址，我们就能知道储存在网络上的文件的位置。
Url 地址 url 是一个简单化的互联网资源定位器，俗称网址，可与 Ip 地址关联（解决了 Ip 地址不方便人记忆的问题）。
url 的组成：协议+域名+资源路径。
如 wendys.love 是域名， https://wendys.love 是协议+域名， https://wendys.love/archives/hello-world.html/ 是协议+域名+资源路径。 一般情况下，可以不输入协议直接访问。还有 https 协议要比 http 协议安全些。 同样，互联网上的每个文件都有唯一的 Url。 浏览器 浏览器是解析、渲染 html、css 等文件的工具，也是解析 url 的工具，是客户端（用户）和服务器端产生交互的桥梁。
用户通过向浏览器输入 Url（网址），浏览器解析出 Url 对应的 Ip 地址，并向该 Ip 发送交互请求，以求获得访问文件的权限。
我们访问网页的过程可以描述为：</description>
    </item>
    
    <item>
      <title>博客的CDN加速方案</title>
      <link>https://1xiaoyuan.github.io/archives/%E5%8D%9A%E5%AE%A2%E7%9A%84cdn%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88.html/</link>
      <pubDate>Thu, 05 Jan 2023 20:36:23 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/%E5%8D%9A%E5%AE%A2%E7%9A%84cdn%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88.html/</guid>
      <description>小白互助😄
Oh，我的网站好慢呐 博客搭在Github的一个缺点是网页访问速度慢，为了解决这个问题，可以借助CDN。
网页为什么慢，简单地说，就是服务器（Github服务器在国外）和客户端（访问网站的用户）距离太远，资源拉取慢。
CDN，即内容分发网络。它的功能是将指定的资源提前缓存到分布在各个城市的站点（缓存服务器）。这样一来，在用户在访问网站后，数据将直接从距离最近的服务器中获取，无需再从原来那个远在天边的源服务器获取（如果它真的远在天边的话）。
ok，那么接下来的问题就是找到一个能白嫖的CDN了，嘻嘻。
jsdelivr（已弃用） 现在该轮到今天的主角了——jsdelivr。
配置起来及其简单，你不需要下载任何软件、申请任何账号，甚至只需要在浏览器的地址栏，按照要求的格式输入代码（其实就是一个网址/url），即可将你Github page上的博客文件上传到jsdelivr的服务器，然后使用他们的服务——CDN加速访问你的博客文件。
如果你的博客也搭建在Github，那么下面的内容对你会有所帮助。
首先，为你的Github的博客仓库发布一个release版本（只有这样才能使用jsdelivr）（很简单，需要你自行上网搜一下），然后我来告诉你需要在浏览器地址栏输入的代码：
注意：下面“你的Github名”、“你的仓库名”、“@发布的版本号”都需要你按照自己的Github来输入，你可以参考该文章末尾处最后一个代码（我的用法）。
如果想上传博客文件库的某个版本： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/ 或者上传版本中的某个文件： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/文件名+后缀 或者上传版本中的某个文件夹： https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/@发布的版本号/文件夹名/ 注意结尾的 / 号是必须有的。
成功后会出现已上传的文档页面。然后你可能就会发现自己的网页打开速度飞快，至少比上次快。
使用以下代码可以直接上传整个仓库的文件，并且实时更新文件，而不是一次上传一个版本，事实上我觉得这是最方便的做法。
https://cdn.jsdelivr.net/gh/你的Github名/你的仓库名/
比如我是这么用的：https://cdn.jsdelivr.net/gh/1xiaoyuan/1xiaoyuan.github.io/
这是后来我才发现的，去掉版本号可以直接上传整个仓库🤷‍♂️ 实时更新真的太爽了。
新方案：cloudflare 2023-07-30，将新域名用 cloudflare 进行CDN托管，速度大大提高。</description>
    </item>
    
    <item>
      <title>Hugo使用经验</title>
      <link>https://1xiaoyuan.github.io/archives/hugo%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html/</link>
      <pubDate>Wed, 02 Nov 2022 14:42:35 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/hugo%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html/</guid>
      <description>为了防止时间太久忘记方法，建站的关键知识点还是要记录一下的。
大人，时代变了 最初我打算自己写出整个网站（现在想想真傻），于是学了一些html和css知识。后来打开第一个txt文件准备动手写主页html文件时，我发现，我一点也写不下去，几个标签下来就厌倦不已，想完全掌握并熟练运用这些知识需要很长时间，就算掌握了它们，写出漂亮页面还需要想象力和创造力——短期内根本不可能写出完整的网页。最重要的是它们非常繁琐，一个人要投入多少时间精力才能搞定所有工作啊！
后来看到网友的一句话——独自造轮子的时代已经结束了，前人已经帮你把模型调好了——我才恍然大悟。我们这个时代太快了，闭门造车的做法很是愚蠢，学会借力前行才是。所以后来果断选择使用hugo引擎来做网站——它的作用是，你给出参数（模型），它负责组装。
不过html和css知识也没有白学，因为对网页结构有了解的话，知道什么是标签，什么是属性和值，以及它们的基本规则，与网页打交道时很有帮助，才有可能根据自己喜好修改主题的细节。
选择Hugo 网站生成器有很多，我看到许多人建站都会经历兜兜转转的过程，工具从wordpress到hexo，再到hugo，再到wordpress&amp;hellip;&amp;hellip;所以我想避免这个坑，于是在开始动手之前花了许久做决定，我的要求是经济、高效、方便——Hugo最适合不过了——静态网页经济安全，Hugo生成速度最快，也不需要服务器。
文件目录 这是每个文件夹存放的内容及其作用的标准格式。
archetypes 在default.md文件中存放文章页面参数 content 存放所有文章，如关于、分类、以及每篇文章 layouts：存放生成页面所使用的模板、参数 _default 页面模板 如list.html是列表页的模板，page.html是普通页的模板 hugo渲染并生成页面的本质：内容+模板=页面 partials 配件模板 如footer.html是页面底部区域的模板，header.html是页面头部的模板 页面模板中常会引用这些配件模板 shortcodes 短代码 在文章中固定格式的简洁代码，如引用bilibili的视频，插入网易云的音乐，所使用的代码存放在这里 这个思维导图，以及顶部的音乐都是短代码的功劳 如有需要，欢迎留言 static img 存放图像 css css模板 css的作用是让页面更漂亮，就像穿了新衣服 js JavaScript themes 存放所有的主题 代码 Hugo 查看版本：hugo version 新建库：hugo new site 666 在当前目录下，新建一个名为&amp;quot;666&amp;quot;的文件夹，其中内置应有的结构 新建文章： hugo new post/name.md 意思是在content/post文件夹内，生成一个名为name.md的文件 生成网页： hugo 将在父文件夹中生成public文件夹，存放着已经渲染好的所有页面 查看效果： hugo server 返回一个网址，你可以使用自己的浏览器来实时查看自己的页面效果 主题 我用的笨方法，下载主题zip包并解压到themes文件夹，之后在config文件中设置theme参数为主题名。 站内引用文章 知道越多越不快乐？：[知道越多越不快乐](https://1xiaoyuan.github.io/archives/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%95%BF%E5%A4%A7%E5%90%8E%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%8D%E5%BF%AB%E4%B9%90.html/) 引用图片 ![实例](/img/posts/实例.png) Github 初始化配置
cd public git init git remote add origin https://github.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://1xiaoyuan.github.io/archives/hello-world.html/</link>
      <pubDate>Thu, 20 Oct 2022 10:14:28 +0800</pubDate>
      
      <guid>https://1xiaoyuan.github.io/archives/hello-world.html/</guid>
      <description>简简单单，无关风月，听从内心，真情表达。
非常感谢马同学和Rollrock两位大哥的协助，帮我解决了一些建站难题，使得本站的初版得以建立。
我希望将生活的一部分记录于此，不知道互联网能带我走向何处，但一定要留下一些属于我的足迹。如果能与一些人建立新的联系，当然再好不过，这也是我的初心之一。</description>
    </item>
    
  </channel>
</rss>
